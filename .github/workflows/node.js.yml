name: VSCode Ext Build & Release (LasecPlot)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Versão/Tag (ex.: v1.2.3 ou V1.2.3-RC5)"
        required: true
        type: string
      notes:
        description: "Notas da release (opcional)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      EXT_DIR: vscode
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VSCE_PAT: ${{ secrets.VSCE_PAT }}
      OPEN_VSX_TOKEN: ${{ secrets.OPEN_VSX_TOKEN }}
      npm_config_build_from_source: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            ${{ env.EXT_DIR }}/package-lock.json
            ${{ env.EXT_DIR }}/package.json

      - name: Dependências nativas
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends build-essential python3 make g++ libudev-dev jq

      - name: Verificações mínimas
        shell: bash
        run: |
          set -euxo pipefail
          test -d "${{ env.EXT_DIR }}"
          test -f "${{ env.EXT_DIR }}/package.json"

      - name: Normalizar versão e validar publisher (sempre estável)
        id: ver
        shell: bash
        working-directory: ${{ env.EXT_DIR }}
        run: |
          set -euxo pipefail
          RAW="${{ inputs.version }}"
          RAW="${RAW//[[:space:]]/}"
          SANITIZED="${RAW#[vV]}"
          BASE="$SANITIZED"

          if [[ "$SANITIZED" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-([A-Za-z]+)([0-9]+)$ ]]; then
            echo "::notice::Versão com sufixo detectada ('$SANITIZED'); publicaremos como estável '${BASH_REMATCH[1]}'."
            BASE="${BASH_REMATCH[1]}"
          fi

          CUR=$(node -p "require('./package.json').version || ''")
          if [ "$CUR" != "$BASE" ]; then
            npm version "$BASE" --no-git-tag-version
          fi

          NAME=$(node -e "console.log(require('./package.json').name || '')")
          PUB=$(node -e "console.log(require('./package.json').publisher || '')")
          if [ -z "$PUB" ]; then
            echo "::error ::O campo 'publisher' está ausente no package.json. Defina o publisher (ex.: 'josuemoraisgh')."
            exit 1
          fi

          echo "SANITIZED_INPUT=$SANITIZED"   >> "$GITHUB_ENV"
          echo "BASE_VERSION=$BASE"           >> "$GITHUB_ENV"
          echo "EXT_NAME=$NAME"               >> "$GITHUB_ENV"
          echo "PUBLISHER=$PUB"               >> "$GITHUB_ENV"
          echo "VSIX_NAME=${PUB}.${NAME}-${BASE}.vsix" >> "$GITHUB_ENV"

      - name: Forçar dependências coerentes (remove legados e fixa serialport@^12)
        shell: bash
        working-directory: ${{ env.EXT_DIR }}
        run: |
          set -euxo pipefail
          # remove lib que puxa serialport@9
          npm pkg delete dependencies.node-usb-native || true
          npm uninstall node-usb-native || true
          # garante serialport@12 e parser@12
          npm install serialport@^12 @serialport/parser-readline@^12 --save
          # types/ts recentes
          npm install -D typescript@^5 @types/node@^20

      - name: Ajustar tsconfig e typings (CommonJS + outDir out)
        shell: bash
        working-directory: ${{ env.EXT_DIR }}
        run: |
          node - <<'NODE'
          const fs = require('fs'); const p='tsconfig.json';
          let j={}; try{ j=JSON.parse(fs.readFileSync(p,'utf8')); }catch{}
          j.compilerOptions=j.compilerOptions||{};
          Object.assign(j.compilerOptions,{
            target:'ES2020',
            lib:['ES2020'],
            module:'commonjs',
            moduleResolution:'node',
            outDir:'out',
            rootDir:'src',
            strict:true,
            sourceMap:true,
            esModuleInterop:true,
            skipLibCheck:true,
            types:['node','vscode']
          });
          j.include=j.include||['src'];
          fs.writeFileSync(p,JSON.stringify(j,null,2));
          console.log('tsconfig.json ok');
          NODE

      - name: Instalar dependências do projeto
        shell: bash
        working-directory: ${{ env.EXT_DIR }}
        run: |
          set -euxo pipefail
          npm config set fund false
          npm config set audit false
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --omit=optional || npm ci
          else
            npm install --no-audit --no-fund --omit=optional || npm install --no-audit --no-fund
          fi

      - name: Garantir package.json.files (pacote enxuto) e main/out
        working-directory: ${{ env.EXT_DIR }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const pkgPath = 'package.json';
          const pkg = JSON.parse(fs.readFileSync(pkgPath,'utf8'));
          // main correto
          pkg.main = './out/extension.js';
          // files mínimos
          const files = new Set(['out/**','images/**','media/**','node_modules/**','package.json','README.md','CHANGELOG.md','LICENSE','LICENSE.md','LICENSE.txt']);
          pkg.files = Array.from(files);
          // engines.vscode obrigatório
          pkg.engines = pkg.engines || {};
          pkg.engines.vscode = pkg.engines.vscode || '^1.90.0';
          // se icon não existir, remove pra não quebrar
          if (pkg.icon && !fs.existsSync(pkg.icon)) {
            console.log('icon ausente -> removendo pkg.icon');
            delete pkg.icon;
          }
          fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2));
          console.log('package.json ajustado');
          NODE

      - name: (Opcional) Copiar frontend para media/ se existir
        working-directory: ${{ env.EXT_DIR }}
        run: |
          set -euxo pipefail
          if [ -d ../server/www ]; then
            rm -rf ./media
            mkdir -p ./media
            cp -r ../server/www/* ./media/
          else
            echo "::notice ::../server/www não encontrado; pulando cópia para media/"
          fi

      - name: Compilar TypeScript (gera out/extension.js)
        working-directory: ${{ env.EXT_DIR }}
        run: |
          set -euxo pipefail
          npm run -s compile
          test -f out/extension.js || { echo "::error ::out/extension.js não gerado"; ls -la out || true; exit 1; }

      - name: Instalar CLIs (vsce/ovsx)
        run: npm i -g @vscode/vsce ovsx

      - name: Empacotar (.vsix)
        working-directory: ${{ env.EXT_DIR }}
        run: |
          set -euxo pipefail
          # Se files[] citar CHANGELOG.md e ele não existir, remove para não quebrar o vsce
          if jq -e '.files?|index("CHANGELOG.md")' package.json >/dev/null 2>&1 && [ ! -f CHANGELOG.md ]; then
            echo "::warning::Removendo CHANGELOG.md de files[] para evitar erro do vsce"
            jq 'del(.files[] | select(.=="CHANGELOG.md"))' package.json > package.tmp && mv package.tmp package.json
          fi
          vsce package -o "../${{ env.VSIX_NAME }}"

      - name: Upload artifact (.vsix)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VSIX_NAME }}
          path: ${{ env.VSIX_NAME }}
          if-no-files-found: error

      - name: Publicar no VS Code Marketplace (sempre estável)
        if: ${{ env.VSCE_PAT != '' }}
        working-directory: ${{ env.EXT_DIR }}
        env:
          VSCE_PAT: ${{ env.VSCE_PAT }}
        run: |
          set -euxo pipefail
          vsce publish --packagePath "../${VSIX_NAME}"

      - name: Publicar no Open VSX (opcional, sempre estável)
        if: ${{ env.OPEN_VSX_TOKEN != '' }}
        env:
          OPEN_VSX_TOKEN: ${{ env.OPEN_VSX_TOKEN }}
        run: |
          set -euxo pipefail
          ovsx publish "${VSIX_NAME}" -p "${OPEN_VSX_TOKEN}"

      - name: Criar/empurrar tag
        shell: bash
        env:
          TAG_NAME: ${{ inputs.version }}
        run: |
          set -euxo pipefail
          git config --global --add safe.directory "$PWD"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git fetch --tags --force --prune
          git tag -a "${TAG_NAME}" -m "Release ${TAG_NAME}" || true
          git push origin "refs/tags/${TAG_NAME}" || true

      - name: Criar Release e anexar VSIX (sempre estável)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: LasecPlot VSCode ${{ inputs.version }}
          body: ${{ inputs.notes }}
          prerelease: false
          target_commitish: ${{ github.sha }}
          files: ${{ env.VSIX_NAME }}
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
